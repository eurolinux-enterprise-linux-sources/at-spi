<refentry id="at-spi-cspi-AccessibleAction-Interface">
<refmeta>
<refentrytitle role="top_of_page" id="at-spi-cspi-AccessibleAction-Interface.top_of_page">AccessibleAction Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleAction Interface</refname>
<refpurpose>The interface implemented by interface elements which are 'actionable' by the
user.</refpurpose>
</refnamediv>

<refsynopsisdiv id="at-spi-cspi-AccessibleAction-Interface.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="void">void</link>                <link linkend="AccessibleAction-ref">AccessibleAction_ref</link>                (<link linkend="AccessibleAction">AccessibleAction</link> *obj);
<link linkend="void">void</link>                <link linkend="AccessibleAction-unref">AccessibleAction_unref</link>              (<link linkend="AccessibleAction">AccessibleAction</link> *obj);
<link linkend="long">long</link>                <link linkend="AccessibleAction-getNActions">AccessibleAction_getNActions</link>        (<link linkend="AccessibleAction">AccessibleAction</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>          <link linkend="AccessibleAction-doAction">AccessibleAction_doAction</link>           (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);
<link linkend="char">char</link> *              <link linkend="AccessibleAction-getKeyBinding">AccessibleAction_getKeyBinding</link>      (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);
<link linkend="char">char</link> *              <link linkend="AccessibleAction-getName">AccessibleAction_getName</link>            (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);
<link linkend="char">char</link> *              <link linkend="AccessibleAction-getDescription">AccessibleAction_getDescription</link>     (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);
</synopsis>
</refsynopsisdiv>









<refsect1 id="at-spi-cspi-AccessibleAction-Interface.description" role="desc">
<title role="desc.title">Description</title>
<para>
The Action interface is implemented by objects with which the user may
interact using common graphical-user-interface metaphors such as "click",
"toggle", "activate", and other gestures which are usually invoked via
interaction with the system pointer or keyboard.  The Action interface allows
clients and/or assistive technologies to expose these actions to the end user
for invocation via alternative mechanisms, and to inform the end user or
assistive technology client that the implementing Accessible object is
reactive to user input.
</para>
</refsect1>

<refsect1 id="at-spi-cspi-AccessibleAction-Interface.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AccessibleAction-ref" role="function">
<title>AccessibleAction_ref ()</title>
<indexterm zone="AccessibleAction-ref"><primary sortas="AccessibleAction_ref">AccessibleAction_ref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleAction_ref                (<link linkend="AccessibleAction">AccessibleAction</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleAction"><type>AccessibleAction</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-unref" role="function">
<title>AccessibleAction_unref ()</title>
<indexterm zone="AccessibleAction-unref"><primary sortas="AccessibleAction_unref">AccessibleAction_unref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleAction_unref              (<link linkend="AccessibleAction">AccessibleAction</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleAction"><type>AccessibleAction</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-getNActions" role="function">
<title>AccessibleAction_getNActions ()</title>
<indexterm zone="AccessibleAction-getNActions"><primary sortas="AccessibleAction_getNActions">AccessibleAction_getNActions</primary></indexterm><programlisting><link linkend="long">long</link>                AccessibleAction_getNActions        (<link linkend="AccessibleAction">AccessibleAction</link> *obj);</programlisting>
<para>
Get the number of actions invokable on an <link linkend="AccessibleAction"><type>AccessibleAction</type></link> implementor.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="long"><type>long</type></link> integer indicatin the number of invokable actions.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-doAction" role="function">
<title>AccessibleAction_doAction ()</title>
<indexterm zone="AccessibleAction-doAction"><primary sortas="AccessibleAction_doAction">AccessibleAction_doAction</primary></indexterm><programlisting><link linkend="SPIBoolean">SPIBoolean</link>          AccessibleAction_doAction           (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Invoke the action indicated by <link linkend="index"><type>index</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> an integer specifying which action to invoke.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if the action is successfully invoked, otherwise <link linkend="FALSE--CAPS"><type>FALSE</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-getKeyBinding" role="function">
<title>AccessibleAction_getKeyBinding ()</title>
<indexterm zone="AccessibleAction-getKeyBinding"><primary sortas="AccessibleAction_getKeyBinding">AccessibleAction_getKeyBinding</primary></indexterm><programlisting><link linkend="char">char</link> *              AccessibleAction_getKeyBinding      (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Get the keybindings for the <parameter>i</parameter>-th action invokable on an
     object implementing <link linkend="AccessibleAction"><type>AccessibleAction</type></link>, if any are defined.
     The keybindings string format is as follows:
       there are multiple parts to a keybinding string (typically 3).
       They are delimited with ";".  The first is the action's
       keybinding which is usable if the object implementing the action
       is currently posted to the screen, e.g. if a menu is posted 
       then these keybindings for the corresponding menu-items are
       available.  The second keybinding substring is the full key sequence
       necessary to post the action's widget and activate it, e.g. for
       a menu item such as "File-&gt;Open" it would both post the menu and
       activate the item.  Thus the second keybinding string is available
       during the lifetime of the containing toplevel window as a whole,
       whereas the first keybinding string only works while the object
       implementing AtkAction is posted.  The third (and optional)
       keybinding string is the "keyboard shortcut" which invokes the 
       action without posting any menus. 
       Meta-keys are indicated by the conventional strings
       "&lt;Control&gt;", "&lt;Alt&gt;", "&lt;Shift&gt;", "&lt;Mod2&gt;",
       etc. (we use the same string as <link linkend="gtk-accelerator-name"><function>gtk_accelerator_name()</function></link> in 
       gtk+-2.X.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> implementor to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> a long integer indicating which action to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a UTF-8 string which can be parsed to determine the <parameter>i</parameter>-th
      invokable action's keybindings.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-getName" role="function">
<title>AccessibleAction_getName ()</title>
<indexterm zone="AccessibleAction-getName"><primary sortas="AccessibleAction_getName">AccessibleAction_getName</primary></indexterm><programlisting><link linkend="char">char</link> *              AccessibleAction_getName            (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Get the name of the '<parameter>i</parameter>-th' action invokable on an
     object implementing <link linkend="AccessibleAction"><type>AccessibleAction</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> implementor to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> a long integer indicating which action to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 'event type' name of the action, as a UTF-8 string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleAction-getDescription" role="function">
<title>AccessibleAction_getDescription ()</title>
<indexterm zone="AccessibleAction-getDescription"><primary sortas="AccessibleAction_getDescription">AccessibleAction_getDescription</primary></indexterm><programlisting><link linkend="char">char</link> *              AccessibleAction_getDescription     (<link linkend="AccessibleAction">AccessibleAction</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Get the description of '<parameter>i</parameter>-th' action invokable on an
     object implementing <link linkend="AccessibleAction"><type>AccessibleAction</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleAction"><type>AccessibleAction</type></link> implementor to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> a long integer indicating which action to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a UTF-8 string describing the '<parameter>i</parameter>-th' invokable action.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
