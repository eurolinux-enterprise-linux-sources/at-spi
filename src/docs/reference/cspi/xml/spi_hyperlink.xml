<refentry id="at-spi-cspi-AccessibleHyperlink-Interface">
<refmeta>
<refentrytitle role="top_of_page" id="at-spi-cspi-AccessibleHyperlink-Interface.top_of_page">AccessibleHyperlink Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleHyperlink Interface</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="at-spi-cspi-AccessibleHyperlink-Interface.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="void">void</link>                <link linkend="AccessibleHyperlink-ref">AccessibleHyperlink_ref</link>             (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
<link linkend="void">void</link>                <link linkend="AccessibleHyperlink-unref">AccessibleHyperlink_unref</link>           (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
<link linkend="long">long</link>                <link linkend="AccessibleHyperlink-getNAnchors">AccessibleHyperlink_getNAnchors</link>     (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
<link linkend="void">void</link>                <link linkend="AccessibleHyperlink-getIndexRange">AccessibleHyperlink_getIndexRange</link>   (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> *startIndex,
                                                         long <link linkend="int">int</link> *endIndex);
<link linkend="Accessible">Accessible</link> *        <link linkend="AccessibleHyperlink-getObject">AccessibleHyperlink_getObject</link>       (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> i);
<link linkend="char">char</link> *              <link linkend="AccessibleHyperlink-getURI">AccessibleHyperlink_getURI</link>          (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> i);
<link linkend="SPIBoolean">SPIBoolean</link>          <link linkend="AccessibleHyperlink-isValid">AccessibleHyperlink_isValid</link>         (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
</synopsis>
</refsynopsisdiv>









<refsect1 id="at-spi-cspi-AccessibleHyperlink-Interface.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="at-spi-cspi-AccessibleHyperlink-Interface.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AccessibleHyperlink-ref" role="function">
<title>AccessibleHyperlink_ref ()</title>
<indexterm zone="AccessibleHyperlink-ref"><primary sortas="AccessibleHyperlink_ref">AccessibleHyperlink_ref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleHyperlink_ref             (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-unref" role="function">
<title>AccessibleHyperlink_unref ()</title>
<indexterm zone="AccessibleHyperlink-unref"><primary sortas="AccessibleHyperlink_unref">AccessibleHyperlink_unref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleHyperlink_unref           (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-getNAnchors" role="function">
<title>AccessibleHyperlink_getNAnchors ()</title>
<indexterm zone="AccessibleHyperlink-getNAnchors"><primary sortas="AccessibleHyperlink_getNAnchors">AccessibleHyperlink_getNAnchors</primary></indexterm><programlisting><link linkend="long">long</link>                AccessibleHyperlink_getNAnchors     (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Get the total number of anchors which an <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> implementor has.
      Though typical hyperlinks have only one anchor, client-side image maps and
      other hypertext objects may potentially activate or refer to multiple
      URIs.  For each anchor there is a corresponding URI and object.
<parameter>see</parameter> <link linkend="AccessibleHyperlink-getURI"><function>AccessibleHyperlink_getURI()</function></link> and <link linkend="AccessibleHyperlink-getObject"><function>AccessibleHyperlink_getObject()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="long"><type>long</type></link> indicating the number of anchors in this hyperlink.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-getIndexRange" role="function">
<title>AccessibleHyperlink_getIndexRange ()</title>
<indexterm zone="AccessibleHyperlink-getIndexRange"><primary sortas="AccessibleHyperlink_getIndexRange">AccessibleHyperlink_getIndexRange</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleHyperlink_getIndexRange   (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> *startIndex,
                                                         long <link linkend="int">int</link> *endIndex);</programlisting>
<para>
Get the starting and ending character offsets of the text range associated with
      a <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link>, in its originating <link linkend="AccessibleHypertext"><type>AccessibleHypertext</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> implementor on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startIndex</parameter>&#160;:</term>
<listitem><simpara> a pointer to a long integer into which the starting
      offset of the text associated with this <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> is returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endIndex</parameter>&#160;:</term>
<listitem><simpara> a pointer to a long integer into which the offset of the first character
      after the text associated with this <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-getObject" role="function">
<title>AccessibleHyperlink_getObject ()</title>
<indexterm zone="AccessibleHyperlink-getObject"><primary sortas="AccessibleHyperlink_getObject">AccessibleHyperlink_getObject</primary></indexterm><programlisting><link linkend="Accessible">Accessible</link> *        AccessibleHyperlink_getObject       (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Get the object associated with a particular hyperlink anchor, as an <link linkend="Accessible"><type>Accessible</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> implementor on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> a (zero-index) long integer indicating which hyperlink anchor to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an <link linkend="Accessible"><type>Accessible</type></link> that represents the object associated with the <parameter>ith</parameter> anchor
       of the specified <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-getURI" role="function">
<title>AccessibleHyperlink_getURI ()</title>
<indexterm zone="AccessibleHyperlink-getURI"><primary sortas="AccessibleHyperlink_getURI">AccessibleHyperlink_getURI</primary></indexterm><programlisting><link linkend="char">char</link> *              AccessibleHyperlink_getURI          (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                                         long <link linkend="int">int</link> i);</programlisting>
<para>
Get the URI associated with a particular hyperlink anchor.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> implementor on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> a (zero-index) long integer indicating which hyperlink anchor to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a UTF-8 string giving the URI of the <parameter>ith</parameter> hyperlink anchor.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleHyperlink-isValid" role="function">
<title>AccessibleHyperlink_isValid ()</title>
<indexterm zone="AccessibleHyperlink-isValid"><primary sortas="AccessibleHyperlink_isValid">AccessibleHyperlink_isValid</primary></indexterm><programlisting><link linkend="SPIBoolean">SPIBoolean</link>          AccessibleHyperlink_isValid         (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Tell whether an <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> object is still valid with respect to its
         originating hypertext object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> of the specified <link linkend="AccessibleHyperlink"><type>AccessibleHyperlink</type></link> is still valid with respect
         to its originating <link linkend="AccessibleHypertext"><type>AccessibleHypertext</type></link> object, <link linkend="FALSE--CAPS"><type>FALSE</type></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
