<refentry id="at-spi-cspi-AccessibleComponent-Interface">
<refmeta>
<refentrytitle role="top_of_page" id="at-spi-cspi-AccessibleComponent-Interface.top_of_page">AccessibleComponent Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleComponent Interface</refname>
<refpurpose>An interface implemented by objects which occupy area on screen.</refpurpose>
</refnamediv>

<refsynopsisdiv id="at-spi-cspi-AccessibleComponent-Interface.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="AccessibleCoordType">AccessibleCoordType</link>;
enum                <link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link>;
<link linkend="void">void</link>                <link linkend="AccessibleComponent-ref">AccessibleComponent_ref</link>             (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="void">void</link>                <link linkend="AccessibleComponent-unref">AccessibleComponent_unref</link>           (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>          <link linkend="AccessibleComponent-contains">AccessibleComponent_contains</link>        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> x,
                                                         long <link linkend="int">int</link> y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
<link linkend="Accessible">Accessible</link> *        <link linkend="AccessibleComponent-getAccessibleAtPoint">AccessibleComponent_getAccessibleAtPoint</link>
                                                        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> x,
                                                         long <link linkend="int">int</link> y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
<link linkend="void">void</link>                <link linkend="AccessibleComponent-getExtents">AccessibleComponent_getExtents</link>      (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *x,
                                                         long <link linkend="int">int</link> *y,
                                                         long <link linkend="int">int</link> *width,
                                                         long <link linkend="int">int</link> *height,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
<link linkend="void">void</link>                <link linkend="AccessibleComponent-getPosition">AccessibleComponent_getPosition</link>     (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *x,
                                                         long <link linkend="int">int</link> *y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
<link linkend="void">void</link>                <link linkend="AccessibleComponent-getSize">AccessibleComponent_getSize</link>         (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *width,
                                                         long <link linkend="int">int</link> *height);
<link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link>  <link linkend="AccessibleComponent-getLayer">AccessibleComponent_getLayer</link>  (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="short">short</link>               <link linkend="AccessibleComponent-getMDIZOrder">AccessibleComponent_getMDIZOrder</link>    (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>          <link linkend="AccessibleComponent-grabFocus">AccessibleComponent_grabFocus</link>       (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="double">double</link>              <link linkend="AccessibleComponent-getAlpha">AccessibleComponent_getAlpha</link>        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
</synopsis>
</refsynopsisdiv>









<refsect1 id="at-spi-cspi-AccessibleComponent-Interface.description" role="desc">
<title role="desc.title">Description</title>
<para>
The Component interface is implemented by objects which are visible, or are
potentially visible, onscreen.  The interface exposes onscreen bounds, the
approximate "layer" in which the object resides, sometimes including z-order
information, and allows objects to explicitly be told to request focus.
</para>
</refsect1>

<refsect1 id="at-spi-cspi-AccessibleComponent-Interface.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AccessibleCoordType" role="enum">
<title>enum AccessibleCoordType</title>
<indexterm zone="AccessibleCoordType"><primary sortas="AccessibleCoordType">AccessibleCoordType</primary></indexterm><programlisting>typedef enum {
  SPI_COORD_TYPE_SCREEN,
  SPI_COORD_TYPE_WINDOW
} AccessibleCoordType;
</programlisting>
<para>
Specifies how xy coordinates are to be interpreted. Used by functions such
as <link linkend="AccessibleComponent-getPosition"><function>AccessibleComponent_getPosition()</function></link> and <link linkend="AccessibleText-getCharacterExtents"><function>AccessibleText_getCharacterExtents()</function></link></para>
<para>
</para><variablelist role="enum">
<varlistentry id="SPI-COORD-TYPE-SCREEN--CAPS" role="constant">
<term><literal>SPI_COORD_TYPE_SCREEN</literal></term>
<listitem><simpara> specifies xy coordinates relative to the screen
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-COORD-TYPE-WINDOW--CAPS" role="constant">
<term><literal>SPI_COORD_TYPE_WINDOW</literal></term>
<listitem><simpara> specifies xy coordinates relative to an object's
top-level window
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponentLayer" role="enum">
<title>enum AccessibleComponentLayer</title>
<indexterm zone="AccessibleComponentLayer"><primary sortas="AccessibleComponentLayer">AccessibleComponentLayer</primary></indexterm><programlisting>typedef enum {
    SPI_LAYER_INVALID,
    SPI_LAYER_BACKGROUND,
    SPI_LAYER_CANVAS,
    SPI_LAYER_WIDGET,
    SPI_LAYER_MDI,
    SPI_LAYER_POPUP,
    SPI_LAYER_OVERLAY,
    SPI_LAYER_WINDOW,
    SPI_LAYER_LAST_DEFINED	
} AccessibleComponentLayer;
</programlisting>
<para>
Describes the layer of a component.
</para>
<para>
These enumerated "layer values" are used when determining which UI
rendering layer a component is drawn into, which can help in making
determinations of when components occlude one another.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="SPI-LAYER-INVALID--CAPS" role="constant">
<term><literal>SPI_LAYER_INVALID</literal></term>
<listitem><simpara> The layer cannot be determined or is somehow undefined.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-BACKGROUND--CAPS" role="constant">
<term><literal>SPI_LAYER_BACKGROUND</literal></term>
<listitem><simpara> Component belongs to the destop background.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-CANVAS--CAPS" role="constant">
<term><literal>SPI_LAYER_CANVAS</literal></term>
<listitem><simpara> Component is a canvas backdrop or drawing area.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-WIDGET--CAPS" role="constant">
<term><literal>SPI_LAYER_WIDGET</literal></term>
<listitem><simpara> Component is a 'normal' widget.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-MDI--CAPS" role="constant">
<term><literal>SPI_LAYER_MDI</literal></term>
<listitem><simpara> Component is drawn in the MDI layer and may have valid
                        Z-information relative to other MDI-layer components.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-POPUP--CAPS" role="constant">
<term><literal>SPI_LAYER_POPUP</literal></term>
<listitem><simpara> Component is in the popup layer, above other widgets and
                        MDI components.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-OVERLAY--CAPS" role="constant">
<term><literal>SPI_LAYER_OVERLAY</literal></term>
<listitem><simpara> Component is in the overlay plane - this value is reserved
                        for future use.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-WINDOW--CAPS" role="constant">
<term><literal>SPI_LAYER_WINDOW</literal></term>
<listitem><simpara> Component is in the window layer and have valid Z-information
                  relative to other window-layer components.
</simpara></listitem>
</varlistentry>
<varlistentry id="SPI-LAYER-LAST-DEFINED--CAPS" role="constant">
<term><literal>SPI_LAYER_LAST_DEFINED</literal></term>
<listitem><simpara> Used to determine the last valid value in the enum,
                        should not be encountered.	
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-ref" role="function">
<title>AccessibleComponent_ref ()</title>
<indexterm zone="AccessibleComponent-ref"><primary sortas="AccessibleComponent_ref">AccessibleComponent_ref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleComponent_ref             (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to an object implementing <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-unref" role="function">
<title>AccessibleComponent_unref ()</title>
<indexterm zone="AccessibleComponent-unref"><primary sortas="AccessibleComponent_unref">AccessibleComponent_unref</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleComponent_unref           (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the object implementing <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-contains" role="function">
<title>AccessibleComponent_contains ()</title>
<indexterm zone="AccessibleComponent-contains"><primary sortas="AccessibleComponent_contains">AccessibleComponent_contains</primary></indexterm><programlisting><link linkend="SPIBoolean">SPIBoolean</link>          AccessibleComponent_contains        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> x,
                                                         long <link linkend="int">int</link> y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Query whether a given <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> contains a particular point.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="long"><type>long</type></link> specifying the x coordinate in question.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="long"><type>long</type></link> specifying the y coordinate in question.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctype</parameter>&#160;:</term>
<listitem><simpara> the desired coordinate system of the point (<parameter>x</parameter>, <parameter>y</parameter>)
        (e.g. SPI_COORD_TYPE_WINDOW, SPI_COORD_TYPE_SCREEN).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TRUE--CAPS"><type>TRUE</type></link> if the specified component contains the point (<parameter>x</parameter>, <parameter>y</parameter>),
         otherwise <link linkend="FALSE--CAPS"><type>FALSE</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getAccessibleAtPoint" role="function">
<title>AccessibleComponent_getAccessibleAtPoint ()</title>
<indexterm zone="AccessibleComponent-getAccessibleAtPoint"><primary sortas="AccessibleComponent_getAccessibleAtPoint">AccessibleComponent_getAccessibleAtPoint</primary></indexterm><programlisting><link linkend="Accessible">Accessible</link> *        AccessibleComponent_getAccessibleAtPoint
                                                        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> x,
                                                         long <link linkend="int">int</link> y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the accessible child at a given coordinate within an <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="long"><type>long</type></link> specifying the x coordinate of the point in question.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="long"><type>long</type></link> specifying the y coordinate of the point in question.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctype</parameter>&#160;:</term>
<listitem><simpara> the coordinate system of the point (<parameter>x</parameter>, <parameter>y</parameter>)
        (e.g. SPI_COORD_TYPE_WINDOW, SPI_COORD_TYPE_SCREEN).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to an <link linkend="Accessible"><type>Accessible</type></link> child of the specified component which
         contains the point (<parameter>x</parameter>, <parameter>y</parameter>), or NULL of no child contains the point.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getExtents" role="function">
<title>AccessibleComponent_getExtents ()</title>
<indexterm zone="AccessibleComponent-getExtents"><primary sortas="AccessibleComponent_getExtents">AccessibleComponent_getExtents</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleComponent_getExtents      (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *x,
                                                         long <link linkend="int">int</link> *y,
                                                         long <link linkend="int">int</link> *width,
                                                         long <link linkend="int">int</link> *height,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the bounding box of the specified <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the minimum x coordinate will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the minimum y coordinate will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the x extents (width) will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the y extents (height) will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctype</parameter>&#160;:</term>
<listitem><simpara> the desired coordinate system into which to return the results,
        (e.g. SPI_COORD_TYPE_WINDOW, SPI_COORD_TYPE_SCREEN).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getPosition" role="function">
<title>AccessibleComponent_getPosition ()</title>
<indexterm zone="AccessibleComponent-getPosition"><primary sortas="AccessibleComponent_getPosition">AccessibleComponent_getPosition</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleComponent_getPosition     (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *x,
                                                         long <link linkend="int">int</link> *y,
                                                         <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the minimum x and y coordinates of the specified <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the minimum x coordinate will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the minimum y coordinate will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctype</parameter>&#160;:</term>
<listitem><simpara> the desired coordinate system into which to return the results,
        (e.g. SPI_COORD_TYPE_WINDOW, SPI_COORD_TYPE_SCREEN).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getSize" role="function">
<title>AccessibleComponent_getSize ()</title>
<indexterm zone="AccessibleComponent-getSize"><primary sortas="AccessibleComponent_getSize">AccessibleComponent_getSize</primary></indexterm><programlisting><link linkend="void">void</link>                AccessibleComponent_getSize         (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                                         long <link linkend="int">int</link> *width,
                                                         long <link linkend="int">int</link> *height);</programlisting>
<para>
Get the size of the specified <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the x extents (width) will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="long"><type>long</type></link> into which the y extents (height) will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getLayer" role="function">
<title>AccessibleComponent_getLayer ()</title>
<indexterm zone="AccessibleComponent-getLayer"><primary sortas="AccessibleComponent_getLayer">AccessibleComponent_getLayer</primary></indexterm><programlisting><link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link>  AccessibleComponent_getLayer  (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Query which layer the component is painted into, to help determine its 
     visibility in terms of stacking order.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="AccessibleComponentLayer"><type>AccessibleComponentLayer</type></link> into which this component is painted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getMDIZOrder" role="function">
<title>AccessibleComponent_getMDIZOrder ()</title>
<indexterm zone="AccessibleComponent-getMDIZOrder"><primary sortas="AccessibleComponent_getMDIZOrder">AccessibleComponent_getMDIZOrder</primary></indexterm><programlisting><link linkend="short">short</link>               AccessibleComponent_getMDIZOrder    (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Query the z stacking order of a component which is in the MDI or window
      layer. (Bigger z-order numbers mean nearer the top)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a short integer indicating the stacking order of the component 
      in the MDI layer, or -1 if the component is not in the MDI layer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-grabFocus" role="function">
<title>AccessibleComponent_grabFocus ()</title>
<indexterm zone="AccessibleComponent-grabFocus"><primary sortas="AccessibleComponent_grabFocus">AccessibleComponent_grabFocus</primary></indexterm><programlisting><link linkend="SPIBoolean">SPIBoolean</link>          AccessibleComponent_grabFocus       (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Attempt to set the keyboard input focus to the specified
        <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if successful, <link linkend="FALSE--CAPS"><type>FALSE</type></link> otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AccessibleComponent-getAlpha" role="function">
<title>AccessibleComponent_getAlpha ()</title>
<indexterm zone="AccessibleComponent-getAlpha"><primary sortas="AccessibleComponent_getAlpha">AccessibleComponent_getAlpha</primary></indexterm><programlisting><link linkend="double">double</link>              AccessibleComponent_getAlpha        (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Get the opacity/alpha value of a component, if alpha blending is in use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="AccessibleComponent"><type>AccessibleComponent</type></link> to be queried.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the opacity value of a component, as a double between 0.0 and 1.0. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
